name: Build LaTeX document
on: 
  workflow_call:
    inputs:
      root:
        description: Specify which template folder to be compiled
        type: string
        required: true
      texfile:
        description: The main LaTeX file to compile
        type: string
        required: true
      no_cache:
        description: Tick the box to install the packages from scratch
        type: boolean
        required: true

env:
  OUTPUT_DIR: 'github_artifacts'

jobs:
  build_latex:
    runs-on: ubuntu-latest
    steps:
    - name: Setup repository
      uses: actions/checkout@v2

    - name: List files
      working-directory: ${{ github.event.inputs.root }}
      run: ls -R

    - name: Cache packages
      uses: actions/cache@v2
      id: cache-packages
      with:
        path: ~/texcache
        key: cache-packages-${{ runner.os }}

    - name: Install latex dependencies with cache
      if: ${{ github.event.inputs.no_cache != true }}
      env:
        CACHE_HIT: ${{steps.cache-valgrind.outputs.cache-hit}}
      run: |
        if [[ "$CACHE_HIT" == 'true' ]]; then
          sudo cp --verbose --force --recursive ~/texcache/* /
        else
          sudo apt-get update 
          sudo apt-get install --yes texlive texlive-xetex texlive-publishers \
          texlive-science texlive-bibtex-extra biber latexmk cm-super
          mkdir -p ~/texcache
          sudo dpkg -L texlive | while IFS= read -r f; do if test -f $f; then echo $f; fi; done | xargs cp --parents --target-directory ~/texcache/
          sudo dpkg -L texlive-xetex | while IFS= read -r f; do if test -f $f; then echo $f; fi; done | xargs cp --parents --target-directory ~/texcache/
          sudo dpkg -L texlive-publishers | while IFS= read -r f; do if test -f $f; then echo $f; fi; done | xargs cp --parents --target-directory ~/texcache/
          sudo dpkg -L texlive-science | while IFS= read -r f; do if test -f $f; then echo $f; fi; done | xargs cp --parents --target-directory ~/texcache/
          sudo dpkg -L texlive-bibtex-extra | while IFS= read -r f; do if test -f $f; then echo $f; fi; done | xargs cp --parents --target-directory ~/texcache/
          sudo dpkg -L biber | while IFS= read -r f; do if test -f $f; then echo $f; fi; done | xargs cp --parents --target-directory ~/texcache/
          sudo dpkg -L latexmk | while IFS= read -r f; do if test -f $f; then echo $f; fi; done | xargs cp --parents --target-directory ~/texcache/
          sudo dpkg -L cm-super | while IFS= read -r f; do if test -f $f; then echo $f; fi; done | xargs cp --parents --target-directory ~/texcache/
        fi

    - name: Install latex dependencies without cache
      if: ${{ github.event.inputs.no_cache == true }}
      run: |
        sudo apt-get update 
        sudo apt-get install --yes texlive texlive-xetex texlive-publishers \
        texlive-science texlive-bibtex-extra biber latexmk cm-super

    - name: First document compliation
      working-directory: ${{ github.event.inputs.root }}
      continue-on-error: true
      run: xelatex ${{ github.event.inputs.texfile }}

    # For bibtex
    - name: Bibliography compliation
      working-directory: ${{ github.event.inputs.root }}
      continue-on-error: true
      run: bibtex ${{ github.event.inputs.texfile }}
    # For biber
    # - name: Bibliography compliation
    #   continue-on-error: true
    #   run: biber ${{ github.event.inputs.texfile }}

    - name: Second document compliation
      working-directory: ${{ github.event.inputs.root }}
      continue-on-error: true
      run: xelatex ${{ github.event.inputs.texfile }}; xelatex ${{ github.event.inputs.texfile }};

    - name: List files
      working-directory: ${{ github.event.inputs.root }}
      run: ls -R
    - name: Move PDF to artifacts
      run: mkdir -p ${{ env.OUTPUT_DIR }} && mv ./${{ github.event.inputs.root }}/${{ github.event.inputs.texfile }}.pdf ./${{ env.OUTPUT_DIR }}/

    - name: List files
      run: ls -R
    - name: Upload PDF as artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.event.inputs.texfile }}.pdf
        path: ./${{ env.OUTPUT_DIR }}
